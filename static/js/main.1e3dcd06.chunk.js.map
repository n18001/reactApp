{"version":3,"sources":["DateSelecter.js","AnimeInfoViewer.js","AnimeInfo.js","App.js","serviceWorker.js","index.js"],"names":["DateSelecter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","year","Date","getFullYear","cours","_this2","request","get","end","err","res","console","log","loadedJson","body","json","setState","_this3","beginYear","ops","toConsumableArray","Array","keys","slice","map","v","react_default","a","createElement","value","key","onChange","e","handleYearChange","defaultValue","_this4","handleCoursChange","target","preventDefault","onSubmit","_this5","yearSelec","createYearOp","coursSelec","createCoursOp","handleSubmit","type","Component","AnimeInfoViewer","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","concat","fetchp","sent","t0","stop","img","image","desc","description","title","noneDisp","href","className","src","alt","createBox","AnimeInfo","DateSelecter_DateSelecter","AnimeInfo_Viewer","Viewer","boxes","id","public_url","AnimeInfoViewer_AnimeInfoViewer","App","AnimeInfo_AnimeInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e3dcd06.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport request from 'superagent'\n\nexport default class DateSelecter extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: null,\n      year: new Date().getFullYear(),\n      cours: 1\n    }\n  }\n\n  componentDidMount () {\n    const url = 'http://api.moemoe.tokyo/anime/v1/master/cours'\n    request\n      .get(url)\n      .end((err, res) => {\n        if (err) return console.log(err)\n        this.loadedJson(res.body)\n      })\n  }\n\n  loadedJson (json) {\n    if (!json) return console.log('No json data')\n    this.setState({ data: json })\n  }\n\n  createYearOp () {\n    const beginYear = this.state.data['1'].year\n    const years = [...Array(new Date().getFullYear() + 1).keys()].slice(beginYear)\n    const ops = years.map(v => {\n      return (\n        <option value={v} key={v}\n          onChange={e => this.handleYearChange(e)}\n        >{v}</option>\n      )\n    })\n    return (\n      <select\n        onChange={e => this.handleYearChange(e)}\n        defaultValue={this.state.year}\n      >{ops}</select>\n    )\n  }\n\n  createCoursOp () {\n    const cours = [...Array(5).keys()].slice(1)\n    const ops = cours.map(v => {\n      return (\n        <option value={v} key={v}\n          onChange={e => this.handleCoursChange(e)}\n        >{v}</option>\n      )\n    })\n    return (\n      <select\n        onChange={e => this.handleCoursChange(e)}\n        defaultValue={this.state.cours}\n      >{ops}</select>\n    )\n  }\n\n  handleYearChange (e) {\n    this.setState({ year: e.target.value })\n  }\n\n  handleCoursChange (e) {\n    this.setState({ cours: e.target.value })\n  }\n\n  handleSubmit (e) {\n    e.preventDefault()\n    const year = this.state.year\n    const cours = this.state.cours\n    if (!year || !cours) return\n    if (this.props.onSubmit) {\n      this.props.onSubmit({\n        target: this,\n        value: { year, cours }\n      })\n    }\n  }\n\n  render () {\n    if (!this.state.data) return null\n    const yearSelec = this.createYearOp()\n    const coursSelec = this.createCoursOp()\n    return (\n      <form onSubmit={e => this.handleSubmit(e)}>\n        {yearSelec}\n        {coursSelec}\n        <input type='submit' />\n      </form>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport fetchp from 'fetch-jsonp'\n\nexport default class AnimeInfoViewer extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: null\n    }\n  }\n\n  componentDidMount () {\n    (async () => {\n      try {\n        const url = `http://api.hitonobetsu.com/ogp/analysis?url=${this.props.url}`\n        const res = await fetchp(url)\n        const json = await res.json()\n        this.loadedJson(json)\n      } catch (err) {\n        console.log(err)\n      }\n    })()\n  }\n\n  loadedJson (json) {\n    if (!json) console.log('No json data')\n    this.setState({ data: json })\n  }\n\n  createBox () {\n    const data = this.state.data\n    const img = data.image\n    const desc = data.description\n    const title = this.props.title\n    const noneDisp = img ? '' : 'none-display'\n    return (\n      <a href={this.props.url}>\n        <div className='viewer-box-inner'>\n          <h2>{title}</h2>\n          <figure className={noneDisp}><img src={img} alt={'a'} /></figure>\n          <p>{desc}</p>\n        </div>\n      </a>\n    )\n  }\n\n  render () {\n    if (!this.state.data) return null\n    return (\n      <div className='viewer-box'>\n        {this.createBox()}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport DateSelecter from './DateSelecter'\nimport AnimeInfoViewer from './AnimeInfoViewer'\nimport request from 'superagent'\n\nexport default class AnimeInfo extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: null\n    }\n  }\n\n  handleSubmit (e) {\n    const year = e.value.year\n    const cours = e.value.cours\n    const url = `https://api.moemoe.tokyo/anime/v1/master/${year}/${cours}`\n    request\n      .get(url)\n      .end((err, res) => {\n        if (err) return console.log(err)\n        this.loadedJson(res.body)\n      })\n  }\n\n  loadedJson (json) {\n    if (!json) return console.log('No json data')\n    this.setState({ data: json })\n  }\n\n  render () {\n    return (\n      <div className='anime-info'>\n        <DateSelecter onSubmit={e => this.handleSubmit(e)} />\n        <Viewer data={this.state.data} />\n      </div>\n    )\n  }\n}\n\nconst Viewer = props => {\n  if (!props.data) return null\n  const boxes = props.data.map(v => {\n    const id = v.id\n    const url = v.public_url\n    const title = v.title\n    return (\n      <li key={id}>\n        <AnimeInfoViewer url={url} id={id} title={title} />\n      </li>\n    )\n  })\n  return (\n    <ul>{boxes}</ul>\n  )\n}\n","import React, { Component } from 'react'\nimport './Anime.css'\nimport AnimeInfo from './AnimeInfo'\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <AnimeInfo />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}